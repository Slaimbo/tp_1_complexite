A)
	i)
	tab
	i, j, k, imax, jmax, somme_max = t[0], somme
	
	pour i = 0; i < n; i++	     
	     pour j = i; j < n; j++
	     	  somme = 0;
	     	  pour k = i; k < j; k++
		       somme += t[k];
		  si somme > somme_max alors
		     somme_max = somme;
		     imax = i;
		     jmax = j;
	

	La complexité de la premiere boucle lié à la deuxième est la somme
	des n premier entier (n(n-1)/2) et est donc  quadratique.
	la derniere boucle ajoute la meme somme qui conduit l'algorithme à
	avoire une complexité cubique.



	ii)
	tab
	i, j, k, l, somme_temp, somme
	
	pour i = 0; i < n; i++
	     somme_temp = 0
	     pour j = i; j < n; j++
	     	  somme_temp += tab[j]
		  si somme_temp > somme alors
		     somme = semme_temp
		     k = i
		     l = j

	
		  


	iii)
	Entrée : tab, n
	Variable : int* cor1[2], cor2[2], rep[2];
		   int i = (n/2)-1, j = i, max = tab[i], somme = tab[i], imin = i, jmax = j;

	cor1 = prog(tab, 0, (n/2)-1);
	cor2 = prog(tab, n/2, n);

	for( i = (n/2)-2; i >= 0; i--)
	{
		somme += tab[i];
		if( somme > max )
		{
			imin = i;
			max = somme;
		}
	}
	
	somme = tab[j];
	max = tab[j];

	for( j = (n/2); j < n; j++)
	{
		somme += tab[j];
		if( somme > max )
		{
			jmax = j;
			max = somme;
		}
	}

	i = imin;
	j = jmax;

	if( (cor1[1] - cor1[0]) > (cor2[1] - cor2[0]) )
	{
		rep[0] = cor1[0];
		rep[1] = cor1[1];
	}
	else
	{
		rep[0] = cor2[0];
		rep[1] = cor2[1];
	}

	if( (rep[1] - rep[0]) < (i - j) )
	{
		rep[0] = i;
		rep[1] = j;
	}

	return rep;
	Complexité : (n^2)/4 + n/2 => O(n^2)

	iv)
	Entree : tab, n
	variable : max = tab[0], imin = 0, jmax = 0, int* rep[2];

	for( int i = 1; i < n; i++ )
	{
		rep = fct(tab, i);
		if(rep[0] > max)
		{
			imin = rep[1];
			jmax = i;
			max = rep[0];
		}
	}

	function fct(int* tab, int pos)//recherche de la plus grande sous sequence se terminant par pos
	{
		int* rep[2];//contient le max et la pos du debut
		int imin = pos;
		max = tab[pos];
		somme = tab[pos]

		for(int i = 0; i >=0; i--)
		{
			somme += tab[i];
			if(somme > max)
			{
				max = somme;
				imin = i;
			}
		}
*		rep[0] = max;
		rep[1] = imin;
		return rep;
	}
